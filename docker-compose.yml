services:
  db:
    image: postgres:15-alpine
    container_name: talabalar_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: talabalar
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: talabalar_api
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@db:5432/talabalar?schema=public
      JWT_SECRET: ${JWT_SECRET:-dev_secret_key_change_in_production}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      SWAGGER_USERNAME: ${SWAGGER_USERNAME:-swagger}
      SWAGGER_PASSWORD: ${SWAGGER_PASSWORD:-swagger123}
      BACKUP_DIR: ${BACKUP_DIR:-/backups}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: talabalar_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: talabalar_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  db_data:
  uploads_data:
  prometheus_data:
  grafana_data:
