openapi: 3.1.0
info:
  title: Talabalar Ro'yhati API
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/v1/students:
    get:
      summary: List students
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
        - in: query
          name: sort
          schema: { type: string }
        - in: query
          name: faculty
          schema: { type: string }
        - in: query
          name: group
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [active, graduated, expelled, academic_leave] }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: OK
    post:
      summary: Create student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCreate'
      responses:
        '201':
          description: Created
  /api/v1/students/deleted:
    get:
      summary: Get soft-deleted students
      description: Retrieve all students that have been soft-deleted (within 30-day retention period)
      tags:
        - Students
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of deleted students
          content:
            application/json:
              schema:
                type: object
                properties:
                  students:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  count:
                    type: integer
                  retention_days:
                    type: integer
                    description: Days until permanent deletion
        '401':
          description: Unauthorized
  /api/v1/students/bulk-restore:
    post:
      summary: Bulk restore deleted students
      description: Restore multiple soft-deleted students at once
      tags:
        - Students
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of student IDs to restore
      responses:
        '200':
          description: Students restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /api/v1/students/bulk-permanent-delete:
    delete:
      summary: Permanently delete multiple students
      description: Permanently delete multiple soft-deleted students (cannot be undone)
      tags:
        - Students
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of student IDs to permanently delete
      responses:
        '200':
          description: Students permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /api/v1/students/export.csv:
    get:
      summary: Export students as CSV
      parameters:
        - in: query
          name: sort
          schema: { type: string }
        - in: query
          name: faculty
          schema: { type: string }
        - in: query
          name: group
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [active, graduated, expelled, academic_leave] }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: CSV file
          content:
            text/csv:
              schema:
                type: string
                format: binary
  /api/v1/students/import:
    post:
      summary: Import students from CSV
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required: [file]
      responses:
        '201':
          description: Import summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  inserted: { type: integer }
                  invalid: { type: integer }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        row: { type: integer }
                        message: { type: string }
  /api/v1/students/{id}:
    get:
      summary: Get student by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    patch:
      summary: Update student
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentUpdate'
      responses:
        '200': { description: OK }
    delete:
      summary: Delete student
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  /api/v1/students/{id}/profile-picture:
    post:
      summary: Upload profile picture
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
              required: [picture]
      responses:
        '200':
          description: Profile picture uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  profile_picture: { type: string }
    delete:
      summary: Delete profile picture
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Profile picture deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
  /api/v1/students/{id}/restore:
    post:
      summary: Restore soft-deleted student
      description: Restore a single soft-deleted student
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Student ID
      responses:
        '200':
          description: Student restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  student:
                    $ref: '#/components/schemas/Student'
        '401':
          description: Unauthorized
        '404':
          description: Student not found
  /api/v1/auth/login:
    post:
      summary: Admin login
      tags:
        - Admin Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string, example: Bearer }
  /api/v1/auth/change-password:
    post:
      summary: Change admin password
      description: Change the password for the currently authenticated admin
      tags:
        - Admin Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current password
                  example: "admin123"
                newPassword:
                  type: string
                  minLength: 6
                  description: New password (minimum 6 characters)
                  example: "newpassword123"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Validation error
        '401':
          description: Current password incorrect or unauthorized
  /api/v1/auth/profile:
    get:
      summary: Get admin profile
      description: Get the profile information of the currently authenticated admin
      tags:
        - Admin Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  full_name:
                    type: string
                  phone:
                    type: string
                  is_active:
                    type: boolean
                  last_login_at:
                    type: string
                    format: date-time
                  created_at:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '404':
          description: Admin not found
    patch:
      summary: Update admin profile
      description: Update the profile information of the currently authenticated admin
      tags:
        - Admin Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  description: Full name of the admin
                  example: "Adminov Admin"
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "admin@example.com"
                phone:
                  type: string
                  description: Phone number
                  example: "+998901234567"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  admin:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      full_name:
                        type: string
                      phone:
                        type: string
                      is_active:
                        type: boolean
        '400':
          description: Validation error or email already in use
        '401':
          description: Unauthorized
        '404':
          description: Admin not found
  /api/v1/student/register:
    post:
      summary: Student registration
      tags:
        - Student Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [full_name, email, password, faculty, group, birth_date, enrollment_year]
              properties:
                full_name: { type: string, example: "Ali Valiyev" }
                email: { type: string, format: email, example: "ali@example.com" }
                password: { type: string, minLength: 6, example: "password123" }
                faculty: { type: string, example: "IT" }
                group: { type: string, example: "IT-21" }
                birth_date: { type: string, format: date, example: "2003-01-15" }
                enrollment_year: { type: integer, example: 2021 }
                phone: { type: string, example: "+998901234567" }
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string }
                      role: { type: string, example: "STUDENT" }
                  student:
                    type: object
                    properties:
                      id: { type: string }
                      full_name: { type: string }
                      email: { type: string }
                      faculty: { type: string }
                      group: { type: string }
                      profile_picture: { type: string, nullable: true }
        '400':
          description: Email already registered
  /api/v1/student/login:
    post:
      summary: Student login
      tags:
        - Student Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email, example: "ali@example.com" }
                password: { type: string, example: "password123" }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string }
                      role: { type: string }
                  student:
                    type: object
                    properties:
                      id: { type: string }
                      full_name: { type: string }
                      email: { type: string }
                      faculty: { type: string }
                      group: { type: string }
                      status: { type: string }
                      profile_picture: { type: string, nullable: true }
        '401':
          description: Invalid credentials
  /api/v1/student/me:
    get:
      summary: Get student profile
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '401':
          description: Unauthorized
    patch:
      summary: Update student profile
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name: { type: string }
                phone: { type: string }
                faculty: { type: string }
                group: { type: string }
                birth_date: { type: string, format: date }
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '401':
          description: Unauthorized
  /api/v1/student/change-password:
    post:
      summary: Change password
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password, confirm_password]
              properties:
                current_password: { type: string }
                new_password: { type: string, minLength: 6 }
                confirm_password: { type: string }
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '400':
          description: Current password is incorrect
        '401':
          description: Unauthorized
  /api/v1/student/logout:
    post:
      summary: Student logout
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
  /api/v1/student/me/profile-picture:
    post:
      summary: Upload student profile picture
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
              required: [picture]
      responses:
        '200':
          description: Profile picture uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  profile_picture: { type: string }
                  student:
                    $ref: '#/components/schemas/Student'
        '401':
          description: Unauthorized
    delete:
      summary: Delete student profile picture
      tags:
        - Student Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile picture deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  student:
                    $ref: '#/components/schemas/Student'
        '401':
          description: Unauthorized
        '400':
          description: Student has no profile picture
components:
  schemas:
    Student:
      type: object
      properties:
        id: { type: string }
        full_name: { type: string }
        faculty: { type: string }
        group: { type: string }
        email: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        birth_date: { type: string, format: date-time }
        enrollment_year: { type: integer }
        status: { type: string, enum: [active, graduated, expelled, academic_leave] }
        profile_picture: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    StudentCreate:
      type: object
      required: [full_name, faculty, group, birth_date, enrollment_year]
      properties:
        full_name: { type: string }
        faculty: { type: string }
        group: { type: string }
        email: { type: string }
        phone: { type: string }
        birth_date: { type: string, format: date }
        enrollment_year: { type: integer }
        status: { type: string, enum: [active, graduated, expelled, academic_leave], default: active }
    StudentUpdate:
      type: object
      properties:
        full_name: { type: string }
        faculty: { type: string }
        group: { type: string }
        email: { type: string }
        phone: { type: string }
        birth_date: { type: string, format: date }
        enrollment_year: { type: integer }
        status: { type: string, enum: [active, graduated, expelled, academic_leave] }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
